pico-8 cartridge // http://www.pico-8.com
version 43
__lua__
stacks = {}

function sprcard(rank,suit,x,y,sm)
 --r: rank (2-13), s: suit (0-3)
 --x: column coord, y: row coord
 -- top/bot sprite offsets
 top_spr = 0
 bot_spr = 16
 if suit & 1 == 1 then -- odd
  top_spr = 32 -- odd suits...
  bot_spr = 48 -- ...black
 end
 
 -- nw & se are ranks
 -- ne & sw are suits
 -- assign rank sprites
	nw_spr = top_spr + rank
	se_spr = bot_spr + rank

 suit_spr = 0 -- red sprites
 if suit & 1 == 1 then
  suit_spr = 32 -- black sprites
 end
 -- also diam/club is suit > 1
 if suit > 1 then
 	suit_spr += 1 -- diamond/club
 end
 
 -- assign suit sprites
	ne_spr = suit_spr
	sw_spr = suit_spr + 16
	
	-- draw all card sprites
	spr(nw_spr, x,   y)
	spr(ne_spr, x+8, y)
	spr(15,     x,   y+8)
	spr(31,     x+8, y+8)
	spr(sw_spr, x,   y+16)
	spr(se_spr, x+8, y+16)
end

function sprcard_st(st)
 if st == nil then
  st = stacks.stock
 end
	x = 0
	y = 0 
	for c in all(st) do
		if x >= 128 then
			x = 0
			y = y + 24
		end			
		if y >= 128 then
			y = 8
		end
		sprcard(c.r,c.s,x,y)
		x += 16
	end
	msg = "num cards: "
	msg = msg..#stacks.stock
	print(msg,8,104,4)
end

function init_stacks()
 --(re)init stacks global
 stacks = {
  stock = {},
  waste = {},
  found = {{}, {}, {}, {}},
  tablu = {{}, {}, {}, {}, {}, {}, {}}
 }
 
 --populate stock w/ all cards
 for s=1,4 do
  for r=2,14 do
  	add(stacks.stock, {s=s, r=r})
  end
 end
 return deck
end

function strcard(card)
 if card.r < 10 then
  txt = tostr(card.r)
 elseif card.r == 10 then
  txt = "0"
 elseif card.r == 11 then
  txt = "j"
 elseif card.r == 12 then
  txt = "q"
 elseif card.r == 13 then
  txt = "k"
 elseif card.r == 14 then
  txt = "a"
 else
  txt = "bad"
 end
	if card.s == 0 then
	 txt = txt.."h"
	elseif card.s == 1 then
	 txt = txt.."s"
	elseif card.s == 2 then
	 txt = txt.."d"
	elseif card.s == 3 then
	 txt = txt.."c"
	else
	 txt = txt.."!"
	end
	return txt
end

function print_stack(st)
 pt = {0, 0}
	for c in all(st) do
	 msg = strcard(c)
		print(msg, pt[1], pt[2])
		pt[1] += 16
		if pt[1] >= 128 then
		 pt[1] = 0
		 pt[2] += 16
		end
	end
end

function sprdeck()
 local p = {2, 2}
	sspr(0,32,16,24,p[1],p[2])
end

function sprmark_found(n)
 --draw 2x3 sprs for ace marks
 --param n is num of ace mark
 local pad = 2
 local offs= (pad + 16) * n
 local p = {56+offs, 2}
 sspr(16,32,16,24,p[1],p[2])
end

function sprmark_tablu(n)
 --draw 2x3 sprs for...
 --...frecell markings (0..6)
 local marg = 2 --margin to scr
 local pad = 2 --between marks 
 local posx = marg
 local posy = 28 --y for all marks
 posx += (n * (pad + 16))
 sspr(16,32,16,24,posx,posy)
end

function deal(deck)
 sprdeck()
 for i=0,3 do
  sprmark_ace(i)
 end
 for i=0,6 do
  sprmark_freecell(i)
 end
end

function shuffle_st(st)
 if st == nil then
  st = stacks.stock
 end
	local tmp = 0
	local i = #st
	local j = 0
	while i >= 2 do
	 j = rnd(i)\1 + 1
	 tmp = st[i]
	 st[i] = st[j]
	 st[j] = tmp
	 i -= 1
	end
end

function _init()
 xoff_card = 16
 yoff_card = 24

 palt(0, false) -- render black
 palt(3, true)  -- d.grn tansp
	cls(3)         -- clear d.grn
	-- setup play board
	init_stacks()
	sprcard_st()
	shuffle_st()
	--sprcard_st(stacks.stock,true)
	--print("num cards: "..#stacks.stock)
	--deal(deck)
end

function _update()
end

function _draw()
end
__gfx__
55555533555555333355555533555555335555553355555533555555335555553355555533555555335555553355555533555555335555553355555557777777
77777753777777533577777735777777357777773577777735777777357777773577777735777777357777773577777735777777357777773577777757777777
78878875777877755788877757888777578787775788877757877777578887775788877757888777578788875788877757787777578787775778777757777777
78888875778887755777877757778777578787775787777757877777577787775787877757878777578787875778777757878777578787775787877757777777
78888875788888755788877757788777578887775788877757888777577787775788877757888777578787875778777757878777578877775787877757777777
77888775778887755787777757778777577787775777877757878777577787775787877757778777578787875778777757887777578787775788877757777777
77787775777877755788877757888777577787775788877757888777577787775788877757778777578788875788777757788777578787775787877757777777
77777775777777755777777757777777577777775777777757777777577777775777777757777777577777775777777757777777577777775777777757777777
57777777577777777777777577777775777777757777777577777775777777757777777577777775777777757777777577777775777777757777777577777775
57887887577787777778887577788875777878757778887577787775777888757778887577788875787888757778887577778775777878757777877577777775
57888887577888777777787577777875777878757778777577787775777778757778787577787875787878757777877577787875777878757778787577777775
57888887578888877778887577778875777888757778887577788875777778757778887577788875787878757777877577787875777887757778787577777775
57788877577888777778777577777875777778757777787577787875777778757778787577777875787878757777877577788775777878757778887577777775
57778777577787777778887577788875777778757778887577788875777778757778887577777875787888757778877577778875777878757778787577777775
35777777357777777777775377777753777777537777775377777753777777537777775377777753777777537777775377777753777777537777775377777775
33555555335555555555553355555533555555335555553355555533555555335555553355555533555555335555553355555533555555335555553377777775
55555533555555333355555533555555335555553355555533555555335555553355555533555555335555553355555533555555335555553355555500000000
77777753777777533577777735777777357777773577777735777777357777773577777735777777357777773577777735777777357777773577777700000000
77707775770007755700077757000777570707775700077757077777570007775700077757000777570700075700077757707777570707775770777700000000
77000775700000755777077757770777570707775707777757077777577707775707077757070777570707075770777757070777570707775707077700000000
70000075700000755700077757700777570007775700077757000777577707775700077757000777570707075770777757070777570077775707077700000000
70070075777077755707777757770777577707775777077757070777577707775707077757770777570707075770777757007777570707775700077700000000
77707775770007755700077757000777577707775700077757000777577707775700077757770777570700075700777757700777570707775707077700000000
77777775777777755777777757777777577777775777777757777777577777775777777757777777577777775777777757777777577777775777777700000000
57777777577777777777777577777775777777757777777577777775777777757777777577777775777777757777777577777775777777757777777500000000
57770777577000777770007577700075777070757770007577707775777000757770007577700075707000757770007577770775777070757777077500000000
57700077570000077777707577777075777070757770777577707775777770757770707577707075707070757777077577707075777070757770707500000000
57000007570000077770007577770075777000757770007577700075777770757770007577700075707070757777077577707075777007757770707500000000
57007007577707777770777577777075777770757777707577707075777770757770707577777075707070757777077577700775777070757770007500000000
57770777577000777770007577700075777770757770007577700075777770757770007577777075707000757770077577770075777070757770707500000000
35777777357777777777775377777753777777537777775377777753777777537777775377777753777777537777775377777753777777537777775300000000
33555555335555555555553355555533555555335555553355555533555555335555553355555533555555335555553355555533555555335555553300000000
335555555555553333eeeeeeeeeeee33000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
35cccccccccccc533e3e33e33e33e3e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5cc7777777777cc5e3e33e33e33e33ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7cdccdccdcc7c5ee33e33e33e33e3e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7dccdccdccd7c5e33e33e33e33e33e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7ccdccdccdc7c5e3e33e33e33e33ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7cdccdccdcc7c5ee33e33e33e33e3e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7dccdccdccd7c5e33e33e33e33e33e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7ccdccdccdc7c5e3e33e33e33e33ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7cdccdccdcc7c5ee33e33e33e33e3e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7dccdccdccd7c5e33e33e33e33e33e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7ccdccdccdc7c5e3e33e33e33e33ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7cdccdccdcc7c5ee33e33e33e33e3e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7dccdccdccd7c5e33e33e33e33e33e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7ccdccdccdc7c5e3e33e33e33e33ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7cdccdccdcc7c5ee33e33e33e33e3e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7dccdccdccd7c5e33e33e33e33e33e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7ccdccdccdc7c5e3e33e33e33e33ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7cdccdccdcc7c5ee33e33e33e33e3e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7dccdccdccd7c5e33e33e33e33e33e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7ccdccdccdc7c5e3e33e33e33e33ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c777777777777c5ee33e33e33e33e3e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
35cccccccccccc533e3e33e33e33e3e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
335555555555553333eeeeeeeeeeee33000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
