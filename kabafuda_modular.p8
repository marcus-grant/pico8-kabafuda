pico-8 cartridge // http://www.pico-8.com
version 43
__lua__
-- main
-- Main game loop and state

#include cards.lua
#include validators.lua
#include renderers.lua
#include auto_move.lua
#include input.lua

-- layout constants
TABLU_Y = 28 --yofset tablu part
CARD_STACK_DY = 8 --card stack offset
WASTE_DX = 8 --waste card x offset

-- ui messages
ui_msg = ""
ui_msg_timer = 0

--TODO: implement deeper undo system
--options:
--1. move-based: store inverse operations
--   {type="grab",src=waste,cnt=1} etc.
--   pros: tiny memory, cons: complex logic
--2. state snapshots: 3-5 full board states  
--   pros: simple, cons: more memory
--question: does multi-undo make game too easy?

--TODO: mouse support
--detect mouse movement in play field
--switch to mouse mode until btn pressed
--show mouse cursor sprite in mouse mode
--hide rect cursor in mouse mode
--implement drag/drop using held[] state

--TODO: pause menu & instructions
--basic rules of kabafuda
--input controls explanation
--restart option in pause menu

--TODO: satisfying game ending
--animate cards leaving foundations
--auto-restart after win
--restart option accessible anytime

function _init()
 xoff_card = 16
 yoff_card = 24

 palt(0, false) -- render black
 palt(3, true)  -- d.grn transp.
 cls(3)         -- clear d.grn
 -- setup play board
 init_gm()
 shuffle()
 
 -- start dealing animation
 deal_cards()
 
 spr_init_board()
end

function _update()
 update_deal()
 -- only allow cursor movement
 -- ...after dealing is complete
 if not anim.active then
  update_crs()
 end
 
 -- update ui message timer
 if ui_msg_timer > 0 then
  ui_msg_timer -= 1
 end
 
 -- check for auto-moves
 if not anim.active then
  check_auto_moves()
 end
end

function _draw()
 cls(3) -- clear to dark green
 spr_init_board()--redraw board each frame
 
 -- draw dealt cards in tableaux
 for i=1,7 do
  local tbl = sts.tbl[i]
  local x = 2 + (i-1) * 18
  rend_card_st(tbl, x, TABLU_Y)
 end
 
 -- draw foundation cards
 for i=1,4 do
  local fnd = sts.fnd[i]
  if #fnd > 0 then
   local c = fnd[#fnd]--top card
   local pad = 2
   local offs= (pad + 16) * (i-1)
   local x = 56 + offs
   local y = 2
   spr_card(c.r, c.s, x, y)
  end
 end
 
 -- render top 3 waste cards
 rend_waste_cards(sts.waste, 20, 2)
 
 -- show stock count
 if #sts.sto > 1 then
  print(#sts.sto, 6, 8, 7)
 end
 
 -- show waste count
 if #sts.waste > 0 then
  print(#sts.waste, 22, 10, 1)
 end

 -- draw cursor
 rend_crs()
 
 -- render held cards
 if #held > 0 then
  local x, y = get_crs_pos()
  rend_held_cards(held, x, y)
 end

 -- render ui messages
 rend_dialog(ui_msg, 0, 120, ui_msg_timer)

end

-->8
-- state

-- suit constants (0-based for sprites)
HRT, SPD, DIA, CLB = 0,1,2,3

-- rank constants  
R2,R3,R4,R5,R6 = 2,3,4,5,6
R7,R8,R9,R10 = 7,8,9,10
RJ,RQ,RK,RA = 11,12,13,14

-- cursor state
crs = {--vvv--(stock/waste/foundations)
 area = "tbl",--tbl|top ^^^
 tbl_i = 1,   --which tableau(1-7)
 sel_cnt = 1, --cards selected from top
 top_pos = 1, --1=stock, 2=waste, 3-6=foundations
 selected = false--card sel?
}

sts = {}
held = {} -- cards being held
held_from = nil -- source stack
anim = {
 active = false,
 tbl_i = 1, --curr. tableau (1-based)
 card_i = 0,--curr. card in tableau
 timer = 0, --animation timer
 delay = 1  --frames btwn deals 
}

function init_gm()
 --(re)init stacks global state
 sts = {
  sto = {},
  waste = {},
  fnd = {{}, {}, {}, {}},
  tbl={{},{},{},{},{},{},{}}
 }
 
 --populate stock w/ all cards
 for s=HRT,CLB do
  for r=R2,RA do
   add(sts.sto, {r=r, s=s})
  end
 end
end

__gfx__
55555533555555333355555533555555335555553355555533555555335555553355555533555555335555553355555533555555335555553355555557777777
77777753777777533577777735777777357777773577777735777777357777773577777735777777357777773577777735777777357777773577777757777777
78878875777877755788877757888777578787775788877757877777578887775788877757888777578788875788877757787777578787775778777757777777
78888875778887755777877757778777578787775787777757877777577787775787877757878777578787875778777757878777578787775787877757777777
78888875788888755788877757788777578887775788877757888777577787775788877757888777578787875778777757878777578877775787877757777777
77888775778887755787777757778777577787775777877757878777577787775787877757778777578787875778777757887777578787775788877757777777
77787775777877755788877757888777577787775788877757888777577787775788877757778777578788875788777757788777578787775787877757777777
77777775777777755777777757777777577777775777777757777777577777775777777757777777577777775777777757777777577777775777777757777777
57777777577777777777777577777775777777757777777577777775777777757777777577777775777777757777777577777775777777757777777577777775
57887887577787777778887577788875777878757778887577787775777888757778887577788875787888757778887577778775777878757777877577777775
57888887577888777777787577777875777878757778777577787775777778757778787577787875787878757777877577787875777878757778787577777775
57888887578888877778887577778875777888757778887577788875777778757778887577788875787878757777877577787875777887757778787577777775
57788877577888777778777577777875777778757777787577787875777778757778787577777875787878757777877577788775777878757778887577777775
57778777577787777778887577788875777778757778887577788875777778757778887577777875787888757778877577778875777878757778787577777775
35777777357777777777775377777753777777537777775377777753777777537777775377777753777777537777775377777753777777537777775377777775
33555555335555555555553355555533555555335555553355555533555555335555553355555533555555335555553355555533555555335555553377777775
55555533555555333355555533555555335555553355555533555555335555553355555533555555335555553355555533555555335555553355555500000000
77777753777777533577777735777777357777773577777735777777357777773577777735777777357777773577777735777777357777773577777700000000
77707775770007755700077757000777570707775700077757077777570007775700077757000777570700075700077757707777570707775770777700000000
77000775700000755777077757770777570707775707777757077777577707775707077757070777570707075770777757070777570707775707077700000000
70000075700000755700077757700777570007775700077757000777577707775700077757000777570707075770777757070777570077775707077700000000
70070075777077755707777757770777577707775777077757070777577707775707077757770777570707075770777757007777570707775700077700000000
77707775770007755700077757000777577707775700077757000777577707775700077757770777570700075700777757700777570707775707077700000000
77777775777777755777777757777777577777775777777757777777577777775777777757777777577777775777777757777777577777775777777700000000
57777777577777777777777577777775777777757777777577777775777777757777777577777775777777757777777577777775777777757777777500000000
57770777577000777770007577700075777070757770007577707775777000757770007577700075707000757770007577770775777070757777077500000000
57700077570000077777707577777075777070757770777577707775777770757770707577707075707070757777077577707075777070757770707500000000
57000007570000077770007577770075777000757770007577700075777770757770007577700075707070757777077577707075777007757770707500000000
57007007577707777770777577777075777770757777707577707075777770757770707577777075707070757777077577700775777070757770007500000000
57770777577000777770007577700075777770757770007577700075777770757770007577777075707000757770077577770075777070757770707500000000
35777777357777777777775377777753777777537777775377777753777777537777775377777753777777537777775377777753777777537777775300000000
33555555335555555555553355555533555555335555553355555533555555335555553355555533555555335555553355555533555555335555553300000000
335555555555553333eeeeeeeeeeee33000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
35cccccccccccc533e3e33e33e33e3e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5cc7777777777cc5e3e33e33e33e33ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7cdccdccdcc7c5ee33e33e33e33e3e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7dccdccdccd7c5e33e33e33e33e33e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7ccdccdccdc7c5e3e33e33e33e33ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7cdccdccdcc7c5ee33e33e33e33e3e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7dccdccdccd7c5e33e33e33e33e33e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7ccdccdccdc7c5e3e33e33e33e33ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7cdccdccdcc7c5ee33e33e33e33e3e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7dccdccdccd7c5e33e33e33e33e33e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7ccdccdccdc7c5e3e33e33e33e33ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7cdccdccdcc7c5ee33e33e33e33e3e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7dccdccdccd7c5e33e33e33e33e33e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7ccdccdccdc7c5e3e33e33e33e33ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7cdccdccdcc7c5ee33e33e33e33e3e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7dccdccdccd7c5e33e33e33e33e33e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7ccdccdccdc7c5e3e33e33e33e33ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7cdccdccdcc7c5ee33e33e33e33e3e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7dccdccdccd7c5e33e33e33e33e33e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c7ccdccdccdc7c5e3e33e33e33e33ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5c777777777777c5ee33e33e33e33e3e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
35cccccccccccc533e3e33e33e33e3e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
335555555555553333eeeeeeeeeeee33000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
